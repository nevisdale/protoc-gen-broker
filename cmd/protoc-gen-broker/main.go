package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/nevisdale/protoc-gen-broker/broker"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			if err := generateFile(gen, f); err != nil {
				return err
			}
		}
		return nil
	})
}

// generateFile generates a _broker.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) error {
	filename := file.GeneratedFilenamePrefix + "_broker.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	generator := generator{p: g}
	generator.head(string(file.GoPackageName))
	for _, msg := range file.Messages {
		generator.message(msg)
	}
	return nil
}

type generator struct {
	p interface{ P(...interface{}) }
}

func (g generator) head(goPackageName string) {
	g.p.P("// Code generated by protoc-gen-broker. DO NOT EDIT.")
	g.p.P()
	g.p.P("package ", goPackageName)
	g.p.P()
	g.p.P("import (")
	g.p.P(`	"context"`)
	g.p.P(`	"fmt"`)
	g.p.P(`	"io"`)
	g.p.P()
	g.p.P(`	bruntime "github.com/nevisdale/protoc-gen-broker/runtime"`)
	g.p.P(")")
	g.p.P()
	g.p.P("var (")
	g.p.P(`	_ context.Context`)
	g.p.P(`	_ fmt.Stringer`)
	g.p.P(`	_ io.Closer`)
	g.p.P(`	_ bruntime.MessageEncoder`)
	g.p.P(")")
	g.p.P()
}

func (g generator) message(msg *protogen.Message) {
	opts := msg.Desc.Options().(*descriptorpb.MessageOptions)

	generate, _ := proto.GetExtension(opts, broker.E_Generate).(bool)
	if !generate {
		return
	}

	encoderOpt, _ := proto.GetExtension(opts, broker.E_Encoder).(broker.ENCODER)
	const (
		encjson = "bruntime.JSONEncoder{}"
		encpb   = "bruntime.ProtobufEncoder{}"
	)
	var encvar string
	switch encoderOpt {
	default:
		encvar = encjson
	case broker.ENCODER_ENCODER_JSON:
		encvar = encjson
	case broker.ENCODER_ENCODER_PROTOBUF:
		encvar = encpb
	}

	typ := msg.GoIdent.GoName
	g.p.P(`type ` + typ + `BrokerProducerInterface interface {`)
	g.p.P(`	Write(context.Context, *` + typ + `) error`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`type ` + typ + `BrokerProducer struct {`)
	g.p.P(`	p bruntime.MessageBrokerProducer`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`func New` + typ + `BrokerProducer(p bruntime.MessageBrokerProducer) ` + typ + `BrokerProducer {`)
	g.p.P(`	return ` + typ + `BrokerProducer{p: p}`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`func (p ` + typ + `BrokerProducer) Write(ctx context.Context, msg *` + typ + `) error {`)
	g.p.P(`	data, err := ` + encvar + `.Encode(msg)`)
	g.p.P(`	if err != nil {`)
	g.p.P(`		return fmt.Errorf("encode message: %w", err)`)
	g.p.P(`	}`)
	g.p.P(`	return p.p.Write(ctx, data)`)
	g.p.P(`}`)
	g.p.P()

	g.p.P(`type ` + typ + `Handler func(context.Context, *` + typ + `) error`)
	g.p.P(`type ` + typ + `BrokerConsumerInterface interface {`)
	g.p.P(`	Handle(context.Context, *` + typ + `) (io.Closer, error)`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`type ` + typ + `BrokerConsumer struct {`)
	g.p.P(`	c bruntime.MessageBrokerConsumer`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`func New` + typ + `BrokerConsumer(c bruntime.MessageBrokerConsumer) ` + typ + `BrokerConsumer {`)
	g.p.P(`	return ` + typ + `BrokerConsumer{c: c}`)
	g.p.P(`}`)
	g.p.P()
	g.p.P(`func (c ` + typ + `BrokerConsumer) Handle(ctx context.Context, handler ` + typ + `Handler) (io.Closer, error) {`)
	g.p.P(`	h := bruntime.MessageHandler(func(ctx context.Context, message []byte) error {`)
	g.p.P(`		var msg ` + typ)
	g.p.P(`		err := ` + encvar + `.Decode(message, &msg)`)
	g.p.P(`		if err != nil {`)
	g.p.P(`			return fmt.Errorf("decode message: %w", err)`)
	g.p.P(`		}`)
	g.p.P(`		return handler(ctx, &msg)`)
	g.p.P(`	})`)
	g.p.P(`	return c.c.Handle(ctx, h)`)
	g.p.P(`}`)
	g.p.P()
}
